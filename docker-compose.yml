
services:
  # ==================== PostgreSQL ====================
  postgres-master:
    image: postgres:15
    container_name: postgres-master
    restart: always
    ports:
      - "5432:5432"
    env_file: .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_RO_USER=${POSTGRES_RO_USER}
      - POSTGRES_RO_PASSWORD=${POSTGRES_RO_PASSWORD}
      - POSTGRES_SHARED_BUFFERS= 4GB
      - POSTGRES_WORK_MEM= 256MB
      - POSTGRES_MAX_CONNECTIONS= 200
      - POSTGRES_WAL_LEVEL= logical
      - POSTGRES_MAX_WAL_SENDERS= 10
      - POSTGRES_WAL_KEEP_SIZE= 512MB
      - POSTGRES_SYNCHRONOUS_STANDBY_NAMES= 'replica'
      - POSTGRES_LISTEN_ADDRESSES= '*'
    volumes:
      -  postgres-master_data:/var/lib/postgresql/data
      - ./init/init.pgsql-master.sh:/docker-entrypoint-initdb.d/init.pgsql.sh
    networks:
      - be_network
  
  postgres-replica:
    image: postgres:15
    container_name: postgres-replica
    restart: always
    ports:
      - "5433:5432" 
    depends_on:
      - postgres-master
    env_file: .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_RO_USER=${POSTGRES_RO_USER}
      - POSTGRES_RO_PASSWORD=${POSTGRES_RO_PASSWORD}
    volumes:
      -  postgres-replica_data:/var/lib/postgresql/data
      - ./init/init.pgsql-replica.sh:/docker-entrypoint-initdb.d/init.pgsql.sh
    networks:
      - be_network

  postgres-exporter-master:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres-exporter-master
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-master:5432/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - be_network

  postgres-exporter-replica:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres-exporter-replica
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-replica:5432/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "9188:9187"
    networks:
      - be_network


  # ==================== MongoDB ====================
  # mongodb:
  #   image: mongo:6
  #   container_name: mongodb
  #   restart: always
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongodb_data:/data/db
  #     - ./init/init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh:ro
  #   networks:
  #     - be_network

  # mongodb-exporter:
  #   image: ssheehy/mongodb-exporter
  #   container_name: mongodb-exporter
  #   restart: always
  #   environment:
  #     - MONGODB_URI=mongodb://mongodb:27017
  #   ports:
  #     - "9216:9216"
  #   networks:
  #     - be_network

  # ==================== Kafka & Zookeeper ====================
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.5.0
  #   container_name: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #   networks:
  #     - be_network

  # kafka-broker-1:
  #   image: confluentinc/cp-kafka:7.5.0
  #   container_name: kafka-broker-1
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "19093:9093"  # ✅ ปรับเพื่อไม่ให้ชน port
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:9093
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-1:9092,EXTERNAL://localhost:19093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  #   networks:
  #     - be_network

  # kafka-broker-2:
  #   image: confluentinc/cp-kafka:7.5.0
  #   container_name: kafka-broker-2
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "19094:9093"
  #   environment:
  #     KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:9093
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-2:9092,EXTERNAL://localhost:19094
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
  #     KAFKA_BROKER_ID: 2
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  #   networks:
  #     - be_network

  # kafka-broker-3:
  #   image: confluentinc/cp-kafka:7.5.0
  #   container_name: kafka-broker-3
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "19095:9093"
  #   environment:
  #     KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL://:9093
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-broker-3:9092,EXTERNAL://localhost:19095
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
  #     KAFKA_BROKER_ID: 3
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
  #   networks:
  #     - be_network

  # kafka-connect:
  #   image: confluentinc/cp-kafka-connect:7.5.0
  #   container_name: kafka-connect
  #   depends_on:
  #     - kafka-broker-1
  #     - kafka-broker-2
  #     - kafka-broker-3
  #     - schema-registry
  #   ports:
  #     - "18083:8083"
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092
  #     CONNECT_REST_PORT: 8083
  #     CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
  #     CONNECT_GROUP_ID: "connect-cluster"
  #     CONNECT_CONFIG_STORAGE_TOPIC: "_connect-configs"
  #     CONNECT_OFFSET_STORAGE_TOPIC: "_connect-offsets"
  #     CONNECT_STATUS_STORAGE_TOPIC: "_connect-status"
  #     CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
  #     CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/jars"
  #     CONNECT_LOG4J_LOGGERS: "org.reflections=ERROR"
  #     CONNECT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #   volumes:
  #     - ./debezium:/etc/kafka-connect/jars
  #   networks:
  #     - be_network

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.5.0
  #   container_name: schema-registry
  #   depends_on:
  #     - kafka-broker-1
  #     - kafka-broker-2
  #     - kafka-broker-3
  #   ports:
  #     - "18081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker-1:9092,PLAINTEXT://kafka-broker-2:9092,PLAINTEXT://kafka-broker-3:9092
  #   networks:
  #     - be_network


  # kafka-exporter:
  #   image: danielqsj/kafka-exporter
  #   container_name: kafka-exporter
  #   ports:
  #     - "9308:9308"
  #   environment:
  #     KAFKA_SERVER: kafka-broker-1:19093
  #   networks:
  #     - be_network

  # ==================== Grafana ====================
  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   env_file: .env
  #   volumes:
  #     - ./grafana/provisioning:/etc/grafana/provisioning
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - be_network

  # # ==================== Prometheus ====================
  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #   networks:
  #     - be_network

  # alertmanager:
  #   image: prom/alertmanager
  #   container_name: alertmanager
  #   ports:
  #     - "9093:9093"
  #   volumes:
  #     - ./alertmanager/config.yml:/etc/alertmanager/config.yml
  #   networks:
  #     - be_network

  # # ==================== Loki Logging Stack ====================
  # loki:
  #   image: grafana/loki:2.9.0
  #   container_name: loki
  #   ports:
  #     - "3100:3100"
  #   volumes:
  #     - ./logging/loki-config.yaml:/etc/loki/config.yaml
  #   command: -config.file=/etc/loki/config.yaml
  #   networks:
  #     - be_network

  # promtail:
  #   image: grafana/promtail:2.9.0
  #   container_name: promtail
  #   volumes:
  #     - /var/log:/var/log
  #     - ./logging/promtail-config.yaml:/etc/promtail/config.yaml
  #   command: -config.file=/etc/promtail/config.yaml
  #   networks:
  #     - be_network

networks:
  be_network:
    driver: bridge

volumes:
  postgres-master_data:
  postgres-replica_data:
  mongodb_data:
  # grafana_data:
